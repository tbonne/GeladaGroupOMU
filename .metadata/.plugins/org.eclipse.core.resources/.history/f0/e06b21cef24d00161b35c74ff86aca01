package LHP;

import cern.jet.random.VonMises;
import cern.jet.random.engine.MersenneTwister64;
import repast.simphony.engine.environment.RunEnvironment;
import repast.simphony.parameter.Parameters;

public class Parameter {
	
	final static Parameters p = RunEnvironment.getInstance().getParameters();
	
	//simulation settings
	public final static String agent_context = "cellContext";
	public final static String geog = "geog";
	public static int randomSeed = 1847620; 			//adjusted in constructor
	public static int numbOfThreads = 8;				//multipule of # of cores (e.g. 8 * 2 = 16)
	public static boolean groupProcess = false;			//sub-groups of agents processed separately, or all agents passed through each separate process
	public static MersenneTwister64 mt = new MersenneTwister64();	// random number generator
	
	//Watcher agent (for observations)
	public final static double stepsPerDay = 60*60*48;	//1 sec interval //each step represents 1 min (1min*60*12), for a total of 12hours of active time per day  //48*4
	public final static int endDay = 1;		 			// will run the simulation until it has completed this many days
	
	//primate: population
	public static int groupSize = 5;						//number of individuals in a group
	public static int numbOfGroups=6;						//number of groups
	public static int maxInitialGroupDistance = 30;         //radius of the initial group (m) (starting conditions)
	
	//primate: movement
	public static double visual_range = 50;					//range at which individuals can see food patches
	public static double attractionMax = 0.5;
	public static double repulsionMax = 0.5;
	public static double bearingWeight = 0.8;
	public static double attractionDistMax = 10;
	public static double repulsionDistMax = 10;
	public static double followMateProb = 0.001; 		//this is the probability that the individual will switch who they are attracted to in the group (random for now). binomial with p=0.01, then mean time attracted to followMate is 1000 steps.
	public static double directionalPersistance = 0.01;         		// standard deviation used in the von mises distribution (0 the agent follows in a straight line)
	
	//Food landscape
	public static double envHomogen = 1;
	public static double cellSize = 10;
	public static double biteSize = 0.05;					//Amount of food reduced per time step
	public static int landscapeWidth = 100;					//width and length of the landscape meters /10000
	public static int landscapeHeight = 100;					//width and length of the landscape meters /10000
	
	public static double regrowthRate = 0.001;				//rate at which regrowth occurs 
	public static double cellChangeRate = 0.001;			//rate of decrease in cell familiarity over time
	
	//public static double food = 4;						//Amount of food within a food site (homogenous for now)
	//public static int foodBuffer = 1;						//size of the food buffer in meters
	//public static double foodDensity = 0.01;              //avg number of food patches within 1m2 area


	//Constructor: used to set values from batch runs or the GUI
	public Parameter(){
		
		randomSeed = (Integer)p.getValue("randomSeed");

		//landscape
		//cellSize = (Integer)p.getValue("cellSize");
		//foodDensity = (Double)p.getValue("foodDensity");
		//foodSD = (Double)p.getValue("envHetero");
		//regrowthRate = (Double)p.getValue("regrowthRate");
		
		//energy balance
		//biteSize = (Double)p.getValue("biteSize");
		//targetEnergy_low = (Double)p.getValue("targetEnergy_low");
		//foodDigestionRate = (Double)p.getValue("foodDigestionRate");
		
		//primate capabilities
		//visual_range = (Integer)p.getValue("foodSearchRange");
		
	}
	
	//public static double foodAvoidanceDistance = 10;		//radius in which food is not selected for when a stranger is nearby (m)
		//public final static double maxDistancePerStep = 0.5; 	//distance (meter) that an individual can travel within one time-step (1sec)
		//public final static double bodyRadius = 4; 				//this is the physical space taken up by an agent (meters)
}
